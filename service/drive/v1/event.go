// Code generated by lark suite oapi sdk gen
package v1

import (
	"lost_found/core"
	"lost_found/core/config"
	"lost_found/event"
)

type FileDeletedEventHandler struct {
	Fn func(*core.Context, *FileDeletedEvent) error
}

func (h *FileDeletedEventHandler) GetEvent() interface{} {
	return &FileDeletedEvent{}
}

func (h *FileDeletedEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*FileDeletedEvent))
}

func SetFileDeletedEventHandler(conf *config.Config, fn func(ctx *core.Context, event *FileDeletedEvent) error) {
	event.SetTypeHandler(conf, "drive.file.deleted_v1", &FileDeletedEventHandler{Fn: fn})
}

type FilePermissionMemberAddedEventHandler struct {
	Fn func(*core.Context, *FilePermissionMemberAddedEvent) error
}

func (h *FilePermissionMemberAddedEventHandler) GetEvent() interface{} {
	return &FilePermissionMemberAddedEvent{}
}

func (h *FilePermissionMemberAddedEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*FilePermissionMemberAddedEvent))
}

func SetFilePermissionMemberAddedEventHandler(conf *config.Config, fn func(ctx *core.Context, event *FilePermissionMemberAddedEvent) error) {
	event.SetTypeHandler(conf, "drive.file.permission_member_added_v1", &FilePermissionMemberAddedEventHandler{Fn: fn})
}

type FilePermissionMemberRemovedEventHandler struct {
	Fn func(*core.Context, *FilePermissionMemberRemovedEvent) error
}

func (h *FilePermissionMemberRemovedEventHandler) GetEvent() interface{} {
	return &FilePermissionMemberRemovedEvent{}
}

func (h *FilePermissionMemberRemovedEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*FilePermissionMemberRemovedEvent))
}

func SetFilePermissionMemberRemovedEventHandler(conf *config.Config, fn func(ctx *core.Context, event *FilePermissionMemberRemovedEvent) error) {
	event.SetTypeHandler(conf, "drive.file.permission_member_removed_v1", &FilePermissionMemberRemovedEventHandler{Fn: fn})
}

type FileReadEventHandler struct {
	Fn func(*core.Context, *FileReadEvent) error
}

func (h *FileReadEventHandler) GetEvent() interface{} {
	return &FileReadEvent{}
}

func (h *FileReadEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*FileReadEvent))
}

func SetFileReadEventHandler(conf *config.Config, fn func(ctx *core.Context, event *FileReadEvent) error) {
	event.SetTypeHandler(conf, "drive.file.read_v1", &FileReadEventHandler{Fn: fn})
}

type FileTitleUpdatedEventHandler struct {
	Fn func(*core.Context, *FileTitleUpdatedEvent) error
}

func (h *FileTitleUpdatedEventHandler) GetEvent() interface{} {
	return &FileTitleUpdatedEvent{}
}

func (h *FileTitleUpdatedEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*FileTitleUpdatedEvent))
}

func SetFileTitleUpdatedEventHandler(conf *config.Config, fn func(ctx *core.Context, event *FileTitleUpdatedEvent) error) {
	event.SetTypeHandler(conf, "drive.file.title_updated_v1", &FileTitleUpdatedEventHandler{Fn: fn})
}

type FileTrashedEventHandler struct {
	Fn func(*core.Context, *FileTrashedEvent) error
}

func (h *FileTrashedEventHandler) GetEvent() interface{} {
	return &FileTrashedEvent{}
}

func (h *FileTrashedEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*FileTrashedEvent))
}

func SetFileTrashedEventHandler(conf *config.Config, fn func(ctx *core.Context, event *FileTrashedEvent) error) {
	event.SetTypeHandler(conf, "drive.file.trashed_v1", &FileTrashedEventHandler{Fn: fn})
}
